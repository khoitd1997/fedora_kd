- block:
    - block:
        - include: rpm_package.yml
        - include: install_deb_packages.yml

        - include: client_ufw.yml
        - include: sshd.yml
        - include: avahi.yml

        # - include: google-chrome/google-chrome.yml

        - name: make user files available
          shell: "{{item}}"
          with_items:
            - cp -vr {{ playbook_dir }}/../user_file /usr/share/
            - chmod -R a+r+x /usr/share/user_file
          args:
            warn: false

        - name: configure fedora misc system stuffs
          shell: "{{item}}"
          with_items:
            - systemctl enable firewalld
          when: ansible_facts['distribution'] == "Fedora"

        - include: unattended_upgrade.yml
          when: ansible_facts['distribution'] == "Ubuntu"

        - name: configure misc system stuffs
          shell: "{{item}}"
          with_items:
            - systemctl enable libvirtd
            - usermod -a -G dialout "{{ ansible_user_id }}"
            - timedatectl set-local-rtc 1 --adjust-system-clock
            - passwd -l root
            - rm -vf /usr/share/applications/flameshot.desktop
          args:
            warn: false

        - name: configure dnf
          shell: "{{item}}"
          with_items:
            - sed -i '/upgrade_type/s/default/security/' /etc/dnf/automatic.conf
            - sed -i '/apply_updates/s/no/yes/' /etc/dnf/automatic.conf
            - systemctl enable --now dnf-automatic-install.timer
            - systemctl enable --now dnf-automatic.timer
            - systemctl enable --now dnf-makecache.timer
            - printf "\nkeepcache=True\n" >> /etc/dnf/dnf.conf
          when: ansible_facts['distribution'] == "Fedora"

        - name: set inotify limit
          lineinfile:
            path: /etc/sysctl.conf
            line: "fs.inotify.max_user_watches=524288"

        - include: npm/npm.yml

        - name: fix snap
          shell: "ln -s /var/lib/snapd/snap /snap"
          when: ansible_facts['distribution'] == "Fedora"

        - name: modify resolv_conf setting
          register: resolv_conf
          ansible.builtin.copy:
            dest: /etc/resolv.conf
            content: |
              nameserver 192.168.1.254

              # cloudfare DNS
              # https://developers.cloudflare.com/1.1.1.1/setup-1.1.1.1/linux
              # nameserver 1.0.0.1
              # nameserver 1.1.1.1
              # nameserver 2606:4700:4700::1111
              # nameserver 2606:4700:4700::1001

              options edns0 trust-ad
              search local
              search attlocal.net
        - name: restart resolv_conf
          service:
            name: systemd-resolved
            state: restarted
          when: resolv_conf.changed

        - name: create group for nfs
          ansible.builtin.group:
            name: kd-nfs
            state: present
            gid: 1750
        - name: add user to kd-nfs group
          ansible.builtin.user:
            name: "{{ ansible_user_id }}"
            shell: /bin/bash
            groups: kd-nfs
            append: yes

        - name: create group for backup
          ansible.builtin.group:
            name: kd-backup
            state: present
            gid: 1751
        - name: add user to kd-backup group
          ansible.builtin.user:
            name: "{{ ansible_user_id }}"
            shell: /bin/bash
            groups: kd-backup
            append: yes

        - name: create group for projects
          ansible.builtin.group:
            name: kd-project
            state: present
            gid: 1752
        - name: add user to kd-project group
          ansible.builtin.user:
            name: "{{ ansible_user_id }}"
            shell: /bin/bash
            groups: kd-project
            append: yes

        - include: client_slurm/client_slurm.yml

        - name: create server_common.sh
          copy:
            dest: /bin/server_common.sh
            mode: u=rwx,g=rx,o=rx
            content: |
              export kd_server_hostname="{{ kd_server_hostname }}"

              export bulk_storage_slow_dir="{{ bulk_storage_slow_dir }}"
              export kd_backup_dir="{{ kd_backup_dir }}"
              export bulk_storage_share_dir="{{ bulk_storage_share_dir }}"
              export kd_big_file_storage="{{ kd_big_file_storage }}"

              export bulk_storage_fast_dir="{{ bulk_storage_fast_dir }}"
              export kd_projects_dir="{{ kd_projects_dir }}"
              export kd_yocto_cache_dir="{{ kd_yocto_cache_dir }}"
              export kd_buildroot_build_dir="{{ kd_buildroot_build_dir }}"

        - name: configure pam.d login
          blockinfile:
            path: /etc/pam.d/login
            marker: "# {mark} .profile config"
            create: yes
            block: |
              auth     optional  pam_gnome_keyring.so
              session  optional  pam_gnome_keyring.so auto_start
          tags:
            - pam_login

      become: true

    - include: helpful_script/helpful_script.yml

    - include: git.yml

    - include: nemo/nemo.yml

    - include: launcher_app/launcher_app.yml

    - include: handler.yml

    - include: applet/applet.yml

    - include: rofi/rofi.yml

    - include: vim/vim.yml

    - include: autokey/autokey.yml

    - name: configure .ssh config
      blockinfile:
        path: ~/.ssh/config
        create: yes
        block: |
          # do ssh reuse whenever possible
          # check https://puppet.com/blog/speed-up-ssh-by-reusing-connections/
          # for list of gotchas
          Host *
            ControlMaster auto
            ControlPath  ~/.ssh/sockets/%r@%h-%p
            ControlPersist 600
    - name: generate ssh socket directory
      shell: "{{item}}"
      with_items:
        - mkdir -p ~/.ssh/sockets
      args:
        warn: false

    # - include: xmodmap/xmodmap.yml
    - stat:
        path: ~/temp
      register: temp_directory_status

    - name: generate temp directories
      when: temp_directory_status.stat.exists == false
      shell: "{{item}}"
      with_items:
        - mkdir -vp ~/temp/
        - git clone https://github.com/khoitd1997/test_cpp.git ~/temp/test_cpp

      args:
        warn: false
      tags:
        - tempdir

    - name: configure redshift
      shell: "{{item}}"
      with_items:
        - ln -sfv {{ playbook_dir }}/misc/redshift/redshift.conf ~/.config/redshift.conf

      args:
        warn: false
      tags:
        - redshift

    - name: install ruby gems
      shell: "{{item}}"
      with_items:
        - gem install rubocop
      become: true

      args:
        warn: false
      tags:
        - redshift

    - pip:
        name:
          - python-language-server
          - pylint
          - wasabi
          - autopep8
          - cpplint
          - cmake_format
          - pynvim
        extra_args: --user
        executable: pip3
      tags:
        - pip
        - base

  tags:
    - misc
